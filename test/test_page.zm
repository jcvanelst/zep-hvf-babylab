import sound_direction;

Page test_page
{
    TestItem    titem;
    FaceItem    fitem;

    string test_old_face = "";
    
    int nth_trial;

    int token_played_counter;

    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
        audio.setup();
    }

    // Pressing the left button on the button box starts this timer
    // if the timer expires the trial will be aborted.
    Timer abort_trial_timer
    {
        on_event:expire()
        {
            response.process_hit(event_time, EVENT_STOP_TIMER);
        }
    }

    // Key press doesn't work properly since the baby window is a output
    // only window.
    on_event:key_press()
    {
        if      (input_key == KEY_Shift_L)
            response.process_hit(event_time, EVENT_STOP_LOOKING);
        else if (input_key == KEY_Shift_R)
            response.process_hit(event_time, EVENT_START_LOOKING);
        else
            handle_special_key(this, input_key, input_modifiers);
    }


    on_event:message()
    {
        response.process_hit(event_time, message_arg);
    }

    Response response
    {
        bool    is_looking;
        time    lookstart;
        time    nolookstart;
        dur     cumlt;
        dur     cumnlt;
        int     nlookaways;
        int     nlooks;

        on_event:start()
        {
            clear();
            lookstart = event_time;
            // assume the child is looking.
            is_looking = true;
        }

        void clear()
        {
            is_looking  = true;
            lookstart   = time(0);
            nolookstart = time(0);
            cumlt       = 0ms;
            cumnlt      = 0ms;
            nlookaways  = 0;
            nlooks      = 1; // The infant is always looking at the start
        }

        void process_hit(time t, int event)
        {
            HitType validity = hit(t);
            //println("Process hit: " + string(validity) + " " + event);
            
            if (validity == HIT_VALID) {
                if (event == EVENT_STOP_LOOKING) { // start abort timer
                    if (!is_looking)
                        return; // ignore, because we weren't looking.
                    is_looking = false;
                    nolookstart = t;
                    cumlt += (t - lookstart);

                    abort_trial_timer.start(t + MAX_LOOK_AWAY_DURATION);
                    control.stop_clock(t);
                    nlookaways++;
                }
                else if (event == EVENT_START_LOOKING) {
                    if(is_looking)
                        return; // ignore, because we already were looking.
                    is_looking = true;
                    lookstart = t;
                    cumnlt += (t - nolookstart);

                    control.start_clock(t);
                    abort_trial_timer.abort();
                    nlooks++;
                }
                else if (event == EVENT_STOP_TIMER) {
                    if (is_looking)
                        cumlt += (t - lookstart);
                    else
                        cumnlt+= (t - nolookstart);

                    // abort trial
                    done(CONTINUE, t);
                }
            }
        }
    }

    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }
 
 
        CanvasGadget canvas
        {
            on_event:resize()
            {
                offset_x = floor(test_window1.width / 2);
                offset_y = floor(test_window1.height/ 2);
            }

            ImageShape picture
            {
                on_event:start()
                {
                    control.release_clock(event_time);
                }

                void setup(string file_name)
                {
                    picture.image    = stimuli_dir() + "images/" + file_name;
                    picture.offset_x = -floor(picture.actual_width/2);
                    picture.offset_y = -floor(picture.actual_height/2);
                }
            }

            time start_picture(time t, string file_name)
            {
                picture.setup(file_name);
                picture.start(t);
                return picture.expected_start_time;
            }
        }
 
        void reset()
        {
            full_abort();
        }
    }

    bool check_if_we_are_done(time t)
    {
        token_played_counter++;
        if(token_played_counter >= TOKEN_REPETITION_MAX)
        {
            done (CONTINUE, t); //done(CONTINUE, t);
            return true;
        }
        return false;
    }

    SoundChain audio
    {
        string[..] test_file_names;

        int snd_index = 0;

        SoundFile clip {}
     
        SoundPlayback playback {}
       
        on_event:start()
        {
            control.show_speaker_icon(FRONT_SIDE);
        }

        on_event:finish()
        {
            control.hide_speaker_icon(FRONT_SIDE);

            StimOutput output;

            time begin      = zero_time();
            output.trial    = nth_trial;
            output.tstart   = int(start_time - begin);
            output.tend     = int(finish_time - begin);
            output.sound    = clip.file;
            output.face     = fitem.face_filename;

            stim_output_append(output);
            
            if(!check_if_we_are_done(event_time))
                this.play(
                        event_time + INTERSOUND_INTERVAL,
                        SND_DIRECTION_FRONT
                        );
        }

        time play(time t, SoundDirection dir)
        {
            this.playback.device = sound_output_device;
            this.clip.file = stimuli_dir() + "sounds/" + 
                             audio.test_file_names[0];
            first_to_last_shift(test_file_names);

            // mute all channels.
            playback.set_scaling(0.0);

            if (dir & SND_DIRECTION_FRONT) {
                playback.set_scaling(CHANNEL_FRONT_LEFT,  1.0);
                playback.set_scaling(CHANNEL_FRONT_RIGHT, 1.0);
            }
            else {
                playback.set_scaling(CHANNEL_FRONT_LEFT,  0.0);
                playback.set_scaling(CHANNEL_FRONT_RIGHT, 0.0);
            }

            if (dir & SND_DIRECTION_LEFT)
                playback.set_scaling(CHANNEL_REAR_LEFT, 1.0);
            else
                playback.set_scaling(CHANNEL_REAR_LEFT, 0.0);
            
            if (dir & SND_DIRECTION_RIGHT)
                playback.set_scaling(CHANNEL_REAR_RIGHT, 1.0);
            else
                playback.set_scaling(CHANNEL_REAR_RIGHT, 0.0);


            this.start(t);
            return audio.expected_start_time;
        }

        void setup()
        {
            audio.abort();

            test_file_names.size = 2;
            test_file_names[0] = titem.sound1_filename;
            test_file_names[1] = titem.sound2_filename;
        }

        void first_to_last_shift(string[] array)
        {
            int index;
            string first = array[index];

            while(index < array.size-1)
            {
                array[index] = array[index+1];
                index++;
            }

            array[array.size-1] = first;
        }
        
    }

     void done(int message, time t)
    {
        layout.reset();
        audio.abort();
        
        signal_target(message);
        target = null;

        abort_trial_timer.abort();
        
        control.stop_clock(t);
        control.clear_status();
        control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        control.clear_status();

        // Just in case; abort presentation
        layout.reset();
        audio.abort();
    }
                
    // select the picture to be used
    void set_test_face() 
    { 
        // select one    
        int n = random(0, test_face_items.size);
        
        while (test_face_items[n].face_filename == test_old_face)
        {
            n = random(0, test_face_items.size);         
        }
        fitem = test_face_items[n];
        test_old_face = test_face_items[n].face_filename;
    }

                    
    // Starts a hab trial.
    time action(Object      caller, 
                time        tref, 
                TestItem    it,
                int         trial_num
                )
    {


        nth_trial      = trial_num;  

        token_played_counter = 0;

        // Save the passed trial control parameters.
        titem = it;

        //prep audio
        audio.setup();

        set_test_face(); 

        tref = test_window1.show_test_page(this, tref);
        
        this.target = caller;

        control.reset_clock();
        control.begin_clock();
        control.start_clock(tref);
        
        //wait for responses
        response.start(tref);

        tref = layout.canvas.start_picture(tref, fitem.face_filename);
        tref = audio.play(tref, SND_DIRECTION_FRONT);//only front speaker
        control.target = this;

        // Update status line on control window. Cleared in done() above.
        control.set_status("test phase" + string(titem.id) + "  " + 
            string(fitem.face_filename));

        return tref;
    }
}

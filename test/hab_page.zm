

import sound_direction;
//import std_baby_windows1;


Page hab_page
{
    HabItem     hitem;
    FaceItem    fitem;

    string hab_old_face = "";
    string test_old_face = "";

    int         nth_trial;      // the number of the current trial.

    ///old hvf 
    int token_played_counter;  //max repetition stuff

    //old hvf
    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
        audio.setup();
    }
 
    //not sure if we need this like other places
    // Timer max_trial_dur_timer
    // {
    //     on_event:expire()
    //     {
    //         response.process_hit(event_time, EVENT_STOP_TIMER);
    //     }
    // }


    
    // Pressing the left button on the button box starts this timer
    // if the timer expires the trial will be aborted.
    Timer abort_trial_timer
    {
        on_event:expire()
        {
            response.process_hit(event_time, EVENT_STOP_TIMER);
        }
    }

    // Key press doesn't work properly since the baby window is a output
    // only window.
    on_event:key_press()
    {
        if      (input_key == KEY_Shift_L)
            response.process_hit(event_time, EVENT_STOP_LOOKING);
        else if (input_key == KEY_Shift_R)
            response.process_hit(event_time, EVENT_START_LOOKING);
        else
            handle_special_key(this, input_key, input_modifiers);
    }


    on_event:message()
    {
        response.process_hit(event_time, message_arg);
    }

    Response response
    {
        bool    is_looking;
        time    lookstart;
        time    nolookstart;
        dur     cumlt;
        dur     cumnlt;
        int     nlookaways;
        int     nlooks;

        on_event:start()
        {
            clear();
            lookstart = event_time;
            // assume the child is looking.
            is_looking = true;
        }

        void clear()
        {
            is_looking  = true;
            lookstart   = time(0);
            nolookstart = time(0);
            cumlt       = 0ms;
            cumnlt      = 0ms;
            nlookaways  = 0;
            nlooks      = 1; // The infant is always looking at the start
                             // of the trial.
        }

        void process_hit(time t, int event)
        {
            HitType validity = hit(t);
            //println("Process hit: " + string(validity) + " " + event);
            
            if (validity == HIT_VALID) {
                if (event == EVENT_STOP_LOOKING) { // start abort timer
                    if (!is_looking)
                        return; // ignore, because we weren't looking.
                    is_looking = false;
                    nolookstart = t;
                    cumlt += (t - lookstart);

                    abort_trial_timer.start(t + MAX_LOOK_AWAY_DURATION);
                    control.stop_clock(t);
                    nlookaways++;
                }
                else if (event == EVENT_START_LOOKING) {
                    if(is_looking)
                        return; // ignore, because we already were looking.
                    is_looking = true;
                    lookstart = t;
                    cumnlt += (t - nolookstart);

                    control.start_clock(t);
                    abort_trial_timer.abort();
                    nlooks++;
                }
                else if (event == EVENT_STOP_TIMER) {
                    if (is_looking)
                        cumlt += (t - lookstart);
                    else
                        cumnlt+= (t - nolookstart);

                    // abort trial
                    done(CONTINUE, t);
                }
            }
        }
    }

    // old hvf code: image and (max) sound repetition

    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }
 
 
        CanvasGadget canvas
        {

            on_event:resize()
            {
                offset_x = floor(test_window1.width / 2);
                offset_y = floor(test_window1.height/ 2);
            }

            ImageShape picture
            {
                on_event:start()
                {
                    println("Releasing clock.");
                    control.release_clock(event_time);
                }

                void setup(string file_name)
                {
                    picture.image    = stimuli_dir() + "images/" + file_name;
                    picture.offset_x = -floor(picture.actual_width/2);
                    picture.offset_y = -floor(picture.actual_height/2);
                }
            }

            time start_picture(time t, string file_name)
            {
                picture.setup(file_name);
                picture.start(t);
                return picture.expected_start_time;
            }
        }
 
        void reset()
        {
            full_abort();
        }
    }

    // old hvf repetitions-based
    bool check_if_we_are_done(time t)
    {
        token_played_counter++;
        if(token_played_counter >= TOKEN_REPETITION_MAX)
        {
            done (CONTINUE, t); //done(CONTINUE, t);
            return true;
        }
        return false;
    }

    SoundChain audio
    {
        string[..] hab_file_names;

        SoundFile clip {}

        int snd_index = 0;

        SoundPlayback playback {}
       
        on_event:start()
        {
            control.show_speaker_icon(FRONT_SIDE);
        }

        on_event:finish()
        {
            control.hide_speaker_icon(FRONT_SIDE);

            if(!check_if_we_are_done(event_time))
                this.play(
                        event_time + INTERSOUND_INTERVAL,
                        SND_DIRECTION_FRONT
                        );
        }

        time play(time t, SoundDirection dir)
        {
            this.playback.device = sound_output_device;
            this.clip.file = stimuli_dir() + "sounds/" +
                hab_file_names[snd_index % hab_file_names.size];
            snd_index++;
            // mute all channels.
            playback.set_scaling(0.0);

            if (dir & SND_DIRECTION_FRONT) {
                playback.set_scaling(CHANNEL_FRONT_LEFT,  1.0);
                playback.set_scaling(CHANNEL_FRONT_RIGHT, 1.0);
            }
            else {
                playback.set_scaling(CHANNEL_FRONT_LEFT,  0.0);
                playback.set_scaling(CHANNEL_FRONT_RIGHT, 0.0);
            }

            if (dir & SND_DIRECTION_LEFT)
                playback.set_scaling(CHANNEL_REAR_LEFT, 1.0);
            else
                playback.set_scaling(CHANNEL_REAR_LEFT, 0.0);
            
            if (dir & SND_DIRECTION_RIGHT)
                playback.set_scaling(CHANNEL_REAR_RIGHT, 1.0);
            else
                playback.set_scaling(CHANNEL_REAR_RIGHT, 0.0);


            this.start(t);
            return audio.expected_start_time;
        }

        void setup()
        {
            snd_index = 0;
            audio.abort();
            hab_file_names.size = 12;

            hab_file_names[0] = hitem.sound1_filename;
            hab_file_names[1] = hitem.sound2_filename;
            hab_file_names[2] = hitem.sound3_filename;
            hab_file_names[3] = hitem.sound4_filename;
            hab_file_names[4] = hitem.sound5_filename;
            hab_file_names[5] = hitem.sound6_filename;
            hab_file_names[6] = hitem.sound7_filename;
            hab_file_names[7] = hitem.sound8_filename;
            hab_file_names[8] = hitem.sound9_filename;
            hab_file_names[9] = hitem.sound10_filename;
            hab_file_names[10] = hitem.sound11_filename;
            hab_file_names[11] = hitem.sound12_filename; 

            hab_file_names.shuffle(1, -1); //we only shuffle the remaining 11 items, see .csv file examples

            println (">>> audio 0: " + hab_file_names[0]);
            println (">>> audio 1: " + hab_file_names[1]);
            println (">>> audio 2: " + hab_file_names[2]);
            println (">>> audio 3: " + hab_file_names[3]);  
            println (">>> audio 4: " + hab_file_names[4]);
            println (">>> audio 5: " + hab_file_names[5]);
            println (">>> audio 6: " + hab_file_names[6]);
            println (">>> audio 7: " + hab_file_names[7]);
            println (">>> audio 8: " + hab_file_names[8]);
            println (">>> audio 9: " + hab_file_names[9]);
            println (">>> audio10: " + hab_file_names[10]);
            println (">>> audio11: " + hab_file_names[11]);            
        }
    }


    void done(int message, time t)
    {
        layout.reset();
        audio.abort();
        
        signal_target(message);
        target = null;
        
        //max_trial_dur_timer.abort();
        abort_trial_timer.abort();
        
        control.stop_clock(t);
        control.clear_status();
        control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        control.clear_status();

        // Just in case; abort presentation if still active.
        layout.reset();
        audio.abort();
    }

    // select the picture to be used
    void set_hab_face() 
    { 
        // select one    
        int n = random(0, hab_face_items.size );
        println(hab_face_items.size);
        while (hab_face_items[n].face_filename == hab_old_face)
        {
            n = random(0, hab_face_items.size);         
        }
        fitem = hab_face_items[n];
        hab_old_face = hab_face_items[n].face_filename;
    }

    // Starts a hab trial.
    time action(Object      caller, 
                time        tref, 
                HabItem     it,
                int         trial_num
                )
    {


        nth_trial      = trial_num;  

        token_played_counter = 0;

        // Save the passed trial control parameters.
        hitem = it;

        //prep audio
        audio.setup();

        set_hab_face(); 

        tref = test_window1.show_test_page(this, tref);
 
        // Show this page (if not yet done) and make tref the trial start time.
        //tref = test_window1.show_test_page(this, tref);
        
        this.target = caller;

        control.reset_clock();
        control.begin_clock();
        control.start_clock(tref);
        
        //wait for responses
        response.start(tref);

        tref = layout.canvas.start_picture(tref, fitem.face_filename);
        tref = audio.play(tref, SND_DIRECTION_FRONT);//only front speaker
        control.target = this;

        //control.set_status("habituation");


        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(hitem.id) + "  " + 
            string(fitem.face_filename));

        //if (MAX_TRIAL_DURATION > 0s)
            //max_trial_dur_timer.start(tref + MAX_TRIAL_DURATION);

        return tref;
    }
}

//     SoundChain audio
//     {
//         SoundFile clip{}
//         SoundPlayback playback{}

//         SoundDirection dir;

//         on_event:start()
//         {
//             int lights = 0;
//             if (dir & SND_DIRECTION_LEFT)
//                 lights |= LEFT_SIDE;
//             if (dir & SND_DIRECTION_FRONT)
//                 lights |= FRONT_SIDE;
//             if (dir & SND_DIRECTION_RIGHT)
//                 lights |= RIGHT_SIDE;

//             control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
//             control.show_speaker_icon(lights);

//             //perhaps save audio start even to detailed log.
//         }

//         on_event:finish()
//         {
//             control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
//             // perhaps save audio end event to detailed log.

//             StimOutput output;
//             time begin = zero_time();
//             output.trial    = nth_trial;
//             output.tstart   = int(start_time - begin);
//             output.tend     = int(finish_time - begin);
//             output.stimulus = clip.file;

//             stimulus_output_append(output);

//             // start the new audio stimulus
//             select_new_stimulus();

//             // always from front.
//             play(event_time + TEST_ISI, SND_DIRECTION_FRONT);
//         }

//         void select_new_stimulus()
//         {
//             item = item_list[random(0, item_list.size)];
//         }

//         time play(time t, SoundDirection direction)
//         {
//             abort();
//             dir = direction;

//             playback.set_scaling(0.0); // all channels off.

//             // Turn scaling back on for the proper channels
//             // keep in mind that the front right isn't wired (2017)
//             // and the front left represents the front.
//             if (dir & SND_DIRECTION_FRONT) {
//                 playback.set_scaling(CHANNEL_FRONT_LEFT , 1.0);
//                 playback.set_scaling(CHANNEL_FRONT_RIGHT, 1.0);
//             }
//             else {
//                 playback.set_scaling(CHANNEL_FRONT_LEFT , 0.0);
//                 playback.set_scaling(CHANNEL_FRONT_RIGHT, 0.0);
//             }

//             if (dir & SND_DIRECTION_LEFT)
//                 playback.set_scaling(CHANNEL_REAR_LEFT, 1.0);
//             else 
//                 playback.set_scaling(CHANNEL_REAR_LEFT, 0.0);
            
//             if (dir & SND_DIRECTION_RIGHT)
//                 playback.set_scaling(CHANNEL_REAR_RIGHT, 1.0);
//             else 
//                 playback.set_scaling(CHANNEL_REAR_RIGHT, 0.0);

//             playback.device = sound_output_device;
//             clip.file = stimuli_dir() + "sounds/" + item.snd_fn + ".wav";

//             start(t);
//             return expected_start_time;
//         }
//     }

//     void done(int message)
//     {
//         audio.abort();
//         signal_target(message);
//         layout.reset();
//         max_trial_dur_timer.abort();
//         abort_trial_timer.abort();
//         control.erase_clock();
//         control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
//     }

//     void setup(TestItem[] items)
//     {
//         // Load first audio file here.
//         item_list   = items;
//         item        = item_list[random(0, item_list.size)];

//         // preload the file
//         audio.clip.file = stimuli_dir() + "sounds/" + item.snd_fn + ".wav";
//     }

//     time action(Object      caller,
//                 time        start,
//                 int         trial_num,
//                 bool        shuffle_colors = false 
//                 )
//     {
//         time tref      = test_window1.show_test_page(this, start);
//         nth_trial      = trial_num;        
//         // Doesn't work because of std_baby_windows1.zm
//         // test_window1.activate(); // to capture keyboard events.
//         this.target    = caller;

//         audio.play(tref, SND_DIRECTION_FRONT);

//         response.start(tref);
//         layout.start_stimulus(tref);

//         control.target = this;
//         control.reset_clock();
//         control.begin_clock();
//         control.start_clock(tref);

//         if (MAX_TRIAL_DURATION > 0s)
//             max_trial_dur_timer.start(tref + MAX_TRIAL_DURATION);

//         return tref;
//     }
// }



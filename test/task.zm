plugin zep_file;

import hvf_event;
import defs;
import output;

import stimuli;

import attention_page;

import pre_page;
import hab_page;
import test_page;
import post_page;


Block task
{
    int hab_crit_met_pre;     //<------------ PRE     TOP
    
    int hab_crit_met_hab;     //              HAB      BURGER
    int hab_crit_met_test;    //              TEST     PICKLE

    int hab_crit_met_post;    //<-------------POST     BOTTOM
    
    int ppid;
    int current_trial;

    on_event:entry()
    {
        control.target = this;

        control.enable_key(KEY_Return, EVENT_STOP_LOOKING);
        control.enable_key(' '       , EVENT_STOP_LOOKING);
        control.enable_key(KEY_Escape, EVENT_START_LOOKING);

        control.button_box.disable_buttons();
        control.button_box.enable_button(int(BUTTON_LEFT), 
                                        EVENT_STOP_LOOKING);
        control.button_box.enable_button(int(BUTTON_LOWER),
                                        EVENT_START_ATTENTION);
        control.button_box.enable_button(int(BUTTON_RIGHT),
                                        EVENT_START_LOOKING);

        hab_crit_met_pre = false;
        hab_crit_met_hab = false;

        int ppid = int(control.ppid);
        if (ppid == 0 && expdb.experiment.status != EXP_STATUS_PREPARING) {
            print_error("Oops ppid == 0, did you enter a valid participant id?"
                        + "\n"
                        );
            print_error("ppid = " + control.ppid + "\n");
            terminate "Invalid participant id\n";
        }
        //prepare_test_items(ppid); // should be on stimuli page???
    }

    on_event:exit()
    { 
        control.button_box.disable_buttons();
    } 

    //--------- pre attention test -------

    Block pre_attention //
    {
        on_event:entry()
        {
            num_cycles = NUM_PIC_PRESENTATION;
            pre_page.start_grid(event_time);
        }

        on_event:exit()
        {
            pre_page.stop_grid();
            save_pre_output();
        }

        // Run the attention getter once before the first trial.
        TransientPart skip_attention
        {
            on_event:entry()
            {
                if (pre_attention.cycle == 0) {
                    grab_attention.enter();
                }
                else {
                    trial.enter();
                }
            }
        }
        
        Trial grab_attention
        {
            on_event:entry()
            {
                attention_page.setup(movie1_frames);
                attention_page.action(this, reference_time, 0ms);
            }

            on_event:exit()
            {
                attention_page.layout.stop_playing();
                trial.reference_time = pre_page.start_grid(now());
            }
        }
        
        Trial trial
        {
            on_event:entry()
            {
                pre_attention.num_cycles = NUM_PIC_PRESENTATION;
                bool is_last = pre_attention.cycle == 
                                                pre_attention.num_cycles - 1;
                bool is_first = pre_attention.cycle == 0;

                if (pre_attention.cycle == 0) // start right after attention
                    pre_page.action(
                            this,
                            reference_time,
                            is_last,
                            is_first
                            );
                else // start after isi.
                    pre_page.action(
                        this,
                        reference_time + ATTENTION_ISI,
                        is_last,
                        is_first
                        );
            }

            on_event:exit()
            {   
                TestOutput output;//PreOutput output;

                output.trialnum = pre_attention.cycle + 1;

               if(pre_page.is_last) // report final
                {
                    output.lt       = int(pre_page.response.cumlt);
                    output.nlt      = int(pre_page.response.cumnlt);
                }
                else
                {
                    if(pre_page.response.is_looking)
                    {
                        output.lt = int(pre_page.response.cumlt 
                                + (event_time - pre_page.response.lookstart) );
                        output.nlt = int(pre_page.response.cumnlt);
                    }
                    else // !fam_page.response_is_looking
                    {
                        output.lt = int(pre_page.response.cumlt);
                        output.nlt = int(pre_page.response.cumnlt
                            + (event_time - pre_page.response.nolookstart) );
                    }
                }
                
                output.looks    = pre_page.response.nlooks;
                output.lookaways= pre_page.response.nlookaways;
                output.phase    = PHASE_PRE_ATTENTION;
                output.crit_met = hab_crit_met_pre;//

                pre_output_append (output);
            }
        }
    }

    //--------- Habituation -----------

    Block habituation
    {

        on_event:entry()
        {
            attention_page.setup(movie1_frames);
 
            if (MAX_HABITUATION_TRIALS <= 0)
                num_cycles = hab_items.size;
            else
                num_cycles = MAX_HABITUATION_TRIALS;
        }

        on_event:exit()
        {
            save_hab_output();
        }


        Trial grab_attention
        {
            on_event:entry()
            {
                attention_page.action(this, reference_time, 0ms);
            }

            on_event:exit()
            {
            }
        }

        Trial trial
        {

            on_event:entry()
            {
                // needs               
                HabItem hitem = hab_items[habituation.cycle];

                hab_page.action(
                        this,
                        reference_time,
                        hitem,
                        habituation.cycle + 1
                        );
                task.current_trial++;
                control.set_current_trial(task.current_trial);
            }
            
            on_event:exit()
            {
                TestOutput output;

                output.trialnum = habituation.cycle + 1;
                output.lt       = int(hab_page.response.cumlt);
                output.nlt      = int(hab_page.response.cumnlt);
                output.looks    = hab_page.response.nlooks;
                output.lookaways= hab_page.response.nlookaways;
                output.phase    = PHASE_HAB;
                output.crit_met = hab_crit_met_hab;
                output.alt_type = 999; //testing: N/A here

                hab_output_append(output);
                if (habituation_done_hab()) {
                    /* Update last appended stimulus. Since the
                     * criterion was met there.
                     */
                    hab_output[hab_output.size-1].crit_met = true;
                    hab_crit_met_hab = true;
                }
            }
        }

        // Tests whether the habituation criterion is met.
        TransientPart hab_hab_done
        {
            on_event:entry()
            {
                if (habituation_done_hab())
                    habituation.leave();
            }
        }
    } 
    
    //--------- Testing with pairs -----------

    Block test
    {

        on_event:entry()
        {
            attention_page.setup(movie2_frames);
 
            if (MAX_TEST_TRIALS <= 0)
                num_cycles = test_items.size;
            else
                num_cycles = MAX_TEST_TRIALS;
        }

        on_event:exit()
        {
            save_output();
        }


        Trial grab_attention
        {
            on_event:entry()
            {
                attention_page.action(this, reference_time, 0ms);
            }

            on_event:exit()
            {
            }
        }

        Trial trial
        {

            on_event:entry()
            {
                // needs               
                TestItem titem = test_items[test.cycle];

                test_page.action(
                        this,
                        reference_time,
                        titem,
                        test.cycle + 1,
                        999);
                task.current_trial++;
                control.set_current_trial(task.current_trial);
            }
            
            on_event:exit()
            {
                TestOutput output;

                output.trialnum = test.cycle + 1;
                output.lt       = int(test_page.response.cumlt);
                output.nlt      = int(test_page.response.cumnlt);
                output.looks    = test_page.response.nlooks;
                output.lookaways= test_page.response.nlookaways;
                output.phase    = PHASE_TEST;
                output.crit_met = hab_crit_met_test;
                output.alt_type = test_page.audio.alt_type;

                output_append(output);
                if (habituation_done_test()) {
                    /* Update last appended stimulus. Since the
                     * criterion was met there.
                     */
                    test_output[test_output.size-1].crit_met = true;
                    hab_crit_met_test = true;
                }
            }
        }
    }

    //---------- Post test attention ------------------

    Block post_attention //
    {
        on_event:entry()
        {
            num_cycles = NUM_PIC_PRESENTATION;
            pre_page.start_grid(event_time);
        }

        on_event:exit()
        {
            post_page.stop_grid();
            save_post_output();
        }

        // Run the attention getter once before the first trial.
        // skip in all other cases.
        TransientPart skip_attention
        {
            on_event:entry()
            {
                if (post_attention.cycle == 0) {
                    grab_attention.enter();
                }
                else {
                    trial.enter();
                }
            }
        }
        
        Trial grab_attention
        {
            on_event:entry()
            {
                attention_page.setup(movie2_frames);
                attention_page.action(this, reference_time, 0ms);
            }

            on_event:exit()
            {
                attention_page.layout.stop_playing();
                trial.reference_time = post_page.start_grid(now());
            }
        }
        
        Trial trial
        {
            on_event:entry()
            {
                //PreItem item = pre_items[pre_attention.cycle];
                post_attention.num_cycles = NUM_PIC_PRESENTATION;
                bool is_last = post_attention.cycle == 
                                                post_attention.num_cycles - 1;
                bool is_first = post_attention.cycle == 0;

                if (post_attention.cycle == 0) // start right after attention
                    post_page.action(
                            this,
                            reference_time,
                            is_last,
                            is_first
                            );
                else // start after isi.
                    post_page.action(
                        this,
                        reference_time + ATTENTION_ISI,
                        is_last,
                        is_first
                        );
            }

            on_event:exit()
            {   
                //pre_page.stop_grid();//not this one
                TestOutput output;//PreOutput output;

                output.trialnum = post_attention.cycle + 1;

               if(post_page.is_last) // report final
                {
                    output.lt       = int(post_page.response.cumlt);
                    output.nlt      = int(post_page.response.cumnlt);
                }
                else
                {
                    if(post_page.response.is_looking)
                    {
                        output.lt = int(post_page.response.cumlt 
                                + (event_time - post_page.response.lookstart) );
                        output.nlt = int(post_page.response.cumnlt);
                    }
                    else // !fam_page.response_is_looking
                    {
                        output.lt = int(post_page.response.cumlt);
                        output.nlt = int(post_page.response.cumnlt
                            + (event_time - post_page.response.nolookstart) );
                    }
                }
                
                output.looks    = post_page.response.nlooks;
                output.lookaways= post_page.response.nlookaways;
                output.phase    = PHASE_POST_ATTENTION;
                output.crit_met = hab_crit_met_post;//

                post_output_append (output);
            }
        }
    }
}


void action (Part caller)
{    
    task.enter(caller);
}

